// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
var MemStorage = class {
  products = /* @__PURE__ */ new Map();
  reviews = /* @__PURE__ */ new Map();
  cartItems = /* @__PURE__ */ new Map();
  wishlistItems = /* @__PURE__ */ new Map();
  orders = /* @__PURE__ */ new Map();
  orderItems = /* @__PURE__ */ new Map();
  currentProductId = 1;
  currentReviewId = 1;
  currentCartItemId = 1;
  currentWishlistItemId = 1;
  currentOrderId = 1;
  currentOrderItemId = 1;
  constructor() {
    this.seedData();
  }
  seedData() {
    const sampleProducts = [
      {
        name: "Satin Night Dress - Sage",
        description: "Luxurious satin slip dress with adjustable straps and lace trim. Perfect for elegant comfort.",
        price: "8500.00",
        salePrice: "6800.00",
        category: "nightdress",
        collection: "new-arrivals",
        fabric: "Premium Satin",
        careInstructions: "Hand wash cold, hang dry, cool iron if needed",
        sizes: ["XS", "S", "M", "L", "XL"],
        colors: ["Sage", "Blush", "Ivory"],
        images: [
          "/attached_assets/image_1752309158083.png",
          "/attached_assets/image_1752309298739.png"
        ],
        stockQuantity: 4,
        featured: true,
        averageRating: "4.9",
        reviewCount: 67
      },
      {
        name: "Silk Pajama Set - Blush Pink",
        description: "Premium Western-style silk pajama set with button-down top and matching shorts. Modern comfort meets timeless elegance.",
        price: "15500.00",
        salePrice: "12400.00",
        category: "sets",
        collection: "silk-collection",
        fabric: "100% Mulberry Silk",
        careInstructions: "Hand wash cold, hang dry, iron on low heat",
        sizes: ["XS", "S", "M", "L", "XL"],
        colors: ["Blush Pink", "Champagne", "Ivory"],
        images: [
          "/attached_assets/image_1752309298739.png",
          "/attached_assets/image_1752309315972.png"
        ],
        stockQuantity: 2,
        featured: true,
        averageRating: "4.8",
        reviewCount: 43
      },
      {
        name: "Cotton Luxury Robe",
        description: "Oversized cotton terry robe with plush texture and spa-style comfort. Features deep pockets and matching belt.",
        price: "9200.00",
        salePrice: null,
        category: "robes",
        collection: "cotton-essentials",
        fabric: "100% Turkish Cotton",
        careInstructions: "Machine wash warm, tumble dry medium",
        sizes: ["XS", "S", "M", "L", "XL"],
        colors: ["Cream", "Stone", "Lavender"],
        images: [
          "/attached_assets/image_1752309315972.png",
          "/attached_assets/image_1752309298739.png"
        ],
        stockQuantity: 8,
        featured: true,
        averageRating: "4.6",
        reviewCount: 32
      },
      {
        name: "Linen Loungewear Set - Stone",
        description: "Relaxed-fit linen set with wide-leg pants and oversized shirt. Perfect for comfortable lounging at home.",
        price: "11200.00",
        salePrice: null,
        category: "loungewear",
        collection: "linen-collection",
        fabric: "100% European Linen",
        careInstructions: "Machine wash cold, tumble dry low, iron if needed",
        sizes: ["XS", "S", "M", "L", "XL"],
        colors: ["Stone", "Natural", "Sage"],
        images: [
          "/attached_assets/image_1752309158083.png",
          "/attached_assets/image_1752309315972.png"
        ],
        stockQuantity: 6,
        featured: true,
        averageRating: "4.7",
        reviewCount: 28
      },
      {
        name: "Velvet Kimono Robe - Lavender",
        description: "Luxurious velvet kimono-style robe with wide sleeves and matching belt. Perfect for special occasions.",
        price: "13800.00",
        salePrice: "11040.00",
        category: "robes",
        collection: "sale",
        fabric: "Crushed Velvet",
        careInstructions: "Dry clean only or gentle hand wash",
        sizes: ["XS", "S", "M", "L", "XL"],
        colors: ["Lavender", "Deep Purple", "Burgundy"],
        images: [
          "https://images.unsplash.com/photo-1567721913486-6585f069b332?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000",
          "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000"
        ],
        stockQuantity: 5,
        featured: false,
        averageRating: "4.5",
        reviewCount: 21
      },
      {
        name: "Bamboo Modal Night Dress",
        description: "Ultra-soft bamboo modal night dress with empire waist and flutter sleeves. Eco-friendly and breathable.",
        price: "7200.00",
        salePrice: null,
        category: "nightdress",
        collection: "cotton-essentials",
        fabric: "Bamboo Modal Blend",
        careInstructions: "Machine wash cold, tumble dry low",
        sizes: ["XS", "S", "M", "L", "XL"],
        colors: ["Sage", "Cream", "Dusty Pink"],
        images: [
          "https://images.unsplash.com/photo-1586495777744-4413f21062fa?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000",
          "https://images.unsplash.com/photo-1562157873-818bc0726f68?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000"
        ],
        stockQuantity: 15,
        featured: false,
        averageRating: "4.4",
        reviewCount: 38
      },
      {
        name: "Linen Shorts Pajama Set",
        description: "Relaxed linen shorts set with button-down shirt. Perfect for warm weather lounging.",
        price: "8900.00",
        salePrice: null,
        category: "sets",
        collection: "new-arrivals",
        fabric: "100% European Linen",
        careInstructions: "Machine wash cold, air dry naturally",
        sizes: ["XS", "S", "M", "L", "XL"],
        colors: ["Natural", "Sage", "Stone"],
        images: [
          "https://images.unsplash.com/photo-1571781926291-c477ebfd024b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000",
          "https://images.unsplash.com/photo-1515886657613-9f3515b0c78f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000"
        ],
        stockQuantity: 9,
        featured: false,
        averageRating: "4.6",
        reviewCount: 42
      }
    ];
    sampleProducts.forEach((product) => {
      const id = this.currentProductId++;
      this.products.set(id, {
        ...product,
        id,
        createdAt: /* @__PURE__ */ new Date()
      });
    });
    const sampleReviews = [
      {
        productId: 1,
        customerName: "Ayesha S.",
        rating: 5,
        title: "Absolutely gorgeous!",
        comment: "The silk pajama set is absolutely gorgeous! The quality is exceptional and it feels so luxurious. Perfect fit and the color is exactly as shown. Will definitely order more!",
        verified: true
      },
      {
        productId: 2,
        customerName: "Fatima K.",
        rating: 5,
        title: "Love the comfort!",
        comment: "Love the linen loungewear! So comfortable and breathable. The fabric is high quality and washes beautifully. Great customer service too. Highly recommend!",
        verified: true
      },
      {
        productId: 3,
        customerName: "Maria R.",
        rating: 4,
        title: "Beautiful dress",
        comment: "Beautiful cotton nightdress! The lace detail is delicate and feminine. Fast delivery and excellent packaging. Only wish there were more color options.",
        verified: true
      }
    ];
    sampleReviews.forEach((review) => {
      const id = this.currentReviewId++;
      this.reviews.set(id, {
        ...review,
        id,
        createdAt: /* @__PURE__ */ new Date()
      });
    });
  }
  async getProducts(filters) {
    let products2 = Array.from(this.products.values());
    if (filters) {
      if (filters.category) {
        products2 = products2.filter((p) => p.category === filters.category);
      }
      if (filters.collection) {
        products2 = products2.filter((p) => p.collection === filters.collection);
      }
      if (filters.minPrice) {
        products2 = products2.filter((p) => parseFloat(p.price) >= filters.minPrice);
      }
      if (filters.maxPrice) {
        products2 = products2.filter((p) => parseFloat(p.price) <= filters.maxPrice);
      }
      if (filters.search) {
        const searchLower = filters.search.toLowerCase();
        products2 = products2.filter(
          (p) => p.name.toLowerCase().includes(searchLower) || p.description.toLowerCase().includes(searchLower) || p.fabric.toLowerCase().includes(searchLower)
        );
      }
    }
    return products2.sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));
  }
  async getProduct(id) {
    return this.products.get(id);
  }
  async getFeaturedProducts() {
    return Array.from(this.products.values()).filter((p) => p.featured);
  }
  async createProduct(product) {
    const id = this.currentProductId++;
    const newProduct = {
      ...product,
      id,
      createdAt: /* @__PURE__ */ new Date(),
      averageRating: "0",
      reviewCount: 0,
      salePrice: product.salePrice || null,
      careInstructions: product.careInstructions || null,
      stockQuantity: product.stockQuantity || 0,
      featured: product.featured || null
    };
    this.products.set(id, newProduct);
    return newProduct;
  }
  async getProductReviews(productId) {
    return Array.from(this.reviews.values()).filter((r) => r.productId === productId).sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));
  }
  async createReview(review) {
    const id = this.currentReviewId++;
    const newReview = {
      ...review,
      id,
      createdAt: /* @__PURE__ */ new Date(),
      title: review.title || null,
      verified: review.verified || null
    };
    this.reviews.set(id, newReview);
    const product = this.products.get(review.productId);
    if (product) {
      const reviews2 = await this.getProductReviews(review.productId);
      const avgRating = reviews2.reduce((sum, r) => sum + r.rating, 0) / reviews2.length;
      product.averageRating = avgRating.toFixed(1);
      product.reviewCount = reviews2.length;
    }
    return newReview;
  }
  async getCartItems(sessionId) {
    const items = Array.from(this.cartItems.values()).filter((item) => item.sessionId === sessionId);
    return items.map((item) => {
      const product = this.products.get(item.productId);
      if (!product) throw new Error("Product not found");
      return { ...item, product };
    });
  }
  async addToCart(item) {
    const existingItem = Array.from(this.cartItems.values()).find(
      (cartItem) => cartItem.sessionId === item.sessionId && cartItem.productId === item.productId && cartItem.size === item.size && cartItem.color === item.color
    );
    if (existingItem) {
      existingItem.quantity += item.quantity || 1;
      return existingItem;
    }
    const id = this.currentCartItemId++;
    const newItem = {
      ...item,
      id,
      createdAt: /* @__PURE__ */ new Date(),
      quantity: item.quantity || 1
    };
    this.cartItems.set(id, newItem);
    return newItem;
  }
  async updateCartItem(id, quantity) {
    const item = this.cartItems.get(id);
    if (item) {
      item.quantity = quantity;
    }
    return item;
  }
  async removeFromCart(id) {
    return this.cartItems.delete(id);
  }
  async clearCart(sessionId) {
    const itemsToDelete = Array.from(this.cartItems.entries()).filter(([_, item]) => item.sessionId === sessionId).map(([id, _]) => id);
    itemsToDelete.forEach((id) => this.cartItems.delete(id));
    return true;
  }
  async getWishlistItems(sessionId) {
    const items = Array.from(this.wishlistItems.values()).filter((item) => item.sessionId === sessionId);
    return items.map((item) => {
      const product = this.products.get(item.productId);
      if (!product) throw new Error("Product not found");
      return { ...item, product };
    });
  }
  async addToWishlist(item) {
    const existingItem = Array.from(this.wishlistItems.values()).find(
      (wishlistItem) => wishlistItem.sessionId === item.sessionId && wishlistItem.productId === item.productId
    );
    if (existingItem) {
      return existingItem;
    }
    const id = this.currentWishlistItemId++;
    const newItem = {
      ...item,
      id,
      createdAt: /* @__PURE__ */ new Date()
    };
    this.wishlistItems.set(id, newItem);
    return newItem;
  }
  async removeFromWishlist(sessionId, productId) {
    const itemToDelete = Array.from(this.wishlistItems.entries()).find(
      ([_, item]) => item.sessionId === sessionId && item.productId === productId
    );
    if (itemToDelete) {
      return this.wishlistItems.delete(itemToDelete[0]);
    }
    return false;
  }
  async createOrder(order, items) {
    const orderId = this.currentOrderId++;
    const newOrder = {
      ...order,
      id: orderId,
      status: "pending",
      createdAt: /* @__PURE__ */ new Date(),
      postalCode: order.postalCode || null,
      shippingCost: order.shippingCost || "0"
    };
    this.orders.set(orderId, newOrder);
    items.forEach((item) => {
      const orderItemId = this.currentOrderItemId++;
      const orderItem = {
        ...item,
        id: orderItemId,
        orderId
      };
      this.orderItems.set(orderItemId, orderItem);
    });
    return newOrder;
  }
  async getOrder(id) {
    return this.orders.get(id);
  }
};
var storage = new MemStorage();

// shared/schema.ts
import { pgTable, text, serial, integer, boolean, decimal, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  email: text("email").notNull().unique(),
  password: text("password").notNull(),
  firstName: text("first_name"),
  lastName: text("last_name"),
  phone: text("phone"),
  address: text("address"),
  city: text("city"),
  postalCode: text("postal_code"),
  createdAt: timestamp("created_at").defaultNow()
});
var products = pgTable("products", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  price: decimal("price", { precision: 10, scale: 2 }).notNull(),
  salePrice: decimal("sale_price", { precision: 10, scale: 2 }),
  category: text("category").notNull(),
  // silk, linen, cotton
  collection: text("collection").notNull(),
  // new-arrivals, silk-collection, etc
  fabric: text("fabric").notNull(),
  careInstructions: text("care_instructions"),
  sizes: text("sizes").array().notNull(),
  // [XS, S, M, L, XL]
  colors: text("colors").array().notNull(),
  images: text("images").array().notNull(),
  stockQuantity: integer("stock_quantity").notNull().default(0),
  featured: boolean("featured").default(false),
  averageRating: decimal("average_rating", { precision: 3, scale: 2 }).default("0"),
  reviewCount: integer("review_count").default(0),
  createdAt: timestamp("created_at").defaultNow()
});
var reviews = pgTable("reviews", {
  id: serial("id").primaryKey(),
  productId: integer("product_id").notNull(),
  customerName: text("customer_name").notNull(),
  rating: integer("rating").notNull(),
  // 1-5
  title: text("title"),
  comment: text("comment").notNull(),
  verified: boolean("verified").default(false),
  createdAt: timestamp("created_at").defaultNow()
});
var cartItems = pgTable("cart_items", {
  id: serial("id").primaryKey(),
  sessionId: text("session_id").notNull(),
  productId: integer("product_id").notNull(),
  size: text("size").notNull(),
  color: text("color").notNull(),
  quantity: integer("quantity").notNull().default(1),
  createdAt: timestamp("created_at").defaultNow()
});
var wishlistItems = pgTable("wishlist_items", {
  id: serial("id").primaryKey(),
  sessionId: text("session_id").notNull(),
  productId: integer("product_id").notNull(),
  createdAt: timestamp("created_at").defaultNow()
});
var orders = pgTable("orders", {
  id: serial("id").primaryKey(),
  sessionId: text("session_id").notNull(),
  customerName: text("customer_name").notNull(),
  email: text("email").notNull(),
  phone: text("phone").notNull(),
  address: text("address").notNull(),
  city: text("city").notNull(),
  postalCode: text("postal_code"),
  paymentMethod: text("payment_method").notNull(),
  // cod, bank-transfer, jazzcash, easypaisa
  subtotal: decimal("subtotal", { precision: 10, scale: 2 }).notNull(),
  shippingCost: decimal("shipping_cost", { precision: 10, scale: 2 }).notNull().default("0"),
  total: decimal("total", { precision: 10, scale: 2 }).notNull(),
  status: text("status").notNull().default("pending"),
  // pending, confirmed, shipped, delivered, cancelled
  createdAt: timestamp("created_at").defaultNow()
});
var orderItems = pgTable("order_items", {
  id: serial("id").primaryKey(),
  orderId: integer("order_id").notNull(),
  productId: integer("product_id").notNull(),
  productName: text("product_name").notNull(),
  size: text("size").notNull(),
  color: text("color").notNull(),
  quantity: integer("quantity").notNull(),
  price: decimal("price", { precision: 10, scale: 2 }).notNull()
});
var insertProductSchema = createInsertSchema(products).omit({
  id: true,
  createdAt: true,
  averageRating: true,
  reviewCount: true
});
var insertReviewSchema = createInsertSchema(reviews).omit({
  id: true,
  createdAt: true
});
var insertCartItemSchema = createInsertSchema(cartItems).omit({
  id: true,
  createdAt: true
});
var insertWishlistItemSchema = createInsertSchema(wishlistItems).omit({
  id: true,
  createdAt: true
});
var insertOrderSchema = createInsertSchema(orders).omit({
  id: true,
  createdAt: true,
  status: true
});
var insertOrderItemSchema = createInsertSchema(orderItems).omit({
  id: true
});

// server/routes.ts
import { z } from "zod";
function getSessionId(req) {
  let sessionId = req.headers["x-session-id"] || req.query.sessionId;
  if (!sessionId) {
    sessionId = "session_" + Math.random().toString(36).substr(2, 9);
  }
  return sessionId;
}
async function registerRoutes(app2) {
  app2.get("/api/products", async (req, res) => {
    try {
      const filters = {
        category: req.query.category,
        collection: req.query.collection,
        minPrice: req.query.minPrice ? parseFloat(req.query.minPrice) : void 0,
        maxPrice: req.query.maxPrice ? parseFloat(req.query.maxPrice) : void 0,
        search: req.query.search
      };
      const products2 = await storage.getProducts(filters);
      res.json(products2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch products" });
    }
  });
  app2.get("/api/products/featured", async (req, res) => {
    try {
      const products2 = await storage.getFeaturedProducts();
      res.json(products2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch featured products" });
    }
  });
  app2.get("/api/products/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const product = await storage.getProduct(id);
      if (!product) {
        return res.status(404).json({ message: "Product not found" });
      }
      res.json(product);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch product" });
    }
  });
  app2.get("/api/products/:id/reviews", async (req, res) => {
    try {
      const productId = parseInt(req.params.id);
      const reviews2 = await storage.getProductReviews(productId);
      res.json(reviews2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch reviews" });
    }
  });
  app2.post("/api/products/:id/reviews", async (req, res) => {
    try {
      const productId = parseInt(req.params.id);
      const reviewData = insertReviewSchema.parse({
        ...req.body,
        productId
      });
      const review = await storage.createReview(reviewData);
      res.status(201).json(review);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid review data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create review" });
    }
  });
  app2.get("/api/cart", async (req, res) => {
    try {
      const sessionId = getSessionId(req);
      const cartItems2 = await storage.getCartItems(sessionId);
      res.json(cartItems2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch cart items" });
    }
  });
  app2.post("/api/cart", async (req, res) => {
    try {
      const sessionId = getSessionId(req);
      const cartItemData = insertCartItemSchema.parse({
        ...req.body,
        sessionId
      });
      const cartItem = await storage.addToCart(cartItemData);
      res.status(201).json(cartItem);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid cart item data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to add item to cart" });
    }
  });
  app2.put("/api/cart/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const { quantity } = req.body;
      if (!quantity || quantity < 1) {
        return res.status(400).json({ message: "Invalid quantity" });
      }
      const cartItem = await storage.updateCartItem(id, quantity);
      if (!cartItem) {
        return res.status(404).json({ message: "Cart item not found" });
      }
      res.json(cartItem);
    } catch (error) {
      res.status(500).json({ message: "Failed to update cart item" });
    }
  });
  app2.delete("/api/cart/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const success = await storage.removeFromCart(id);
      if (!success) {
        return res.status(404).json({ message: "Cart item not found" });
      }
      res.json({ message: "Item removed from cart" });
    } catch (error) {
      res.status(500).json({ message: "Failed to remove cart item" });
    }
  });
  app2.delete("/api/cart", async (req, res) => {
    try {
      const sessionId = getSessionId(req);
      await storage.clearCart(sessionId);
      res.json({ message: "Cart cleared" });
    } catch (error) {
      res.status(500).json({ message: "Failed to clear cart" });
    }
  });
  app2.get("/api/wishlist", async (req, res) => {
    try {
      const sessionId = getSessionId(req);
      const wishlistItems2 = await storage.getWishlistItems(sessionId);
      res.json(wishlistItems2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch wishlist items" });
    }
  });
  app2.post("/api/wishlist", async (req, res) => {
    try {
      const sessionId = getSessionId(req);
      const wishlistItemData = insertWishlistItemSchema.parse({
        ...req.body,
        sessionId
      });
      const wishlistItem = await storage.addToWishlist(wishlistItemData);
      res.status(201).json(wishlistItem);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid wishlist item data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to add item to wishlist" });
    }
  });
  app2.delete("/api/wishlist/:productId", async (req, res) => {
    try {
      const sessionId = getSessionId(req);
      const productId = parseInt(req.params.productId);
      const success = await storage.removeFromWishlist(sessionId, productId);
      if (!success) {
        return res.status(404).json({ message: "Wishlist item not found" });
      }
      res.json({ message: "Item removed from wishlist" });
    } catch (error) {
      res.status(500).json({ message: "Failed to remove wishlist item" });
    }
  });
  app2.post("/api/orders", async (req, res) => {
    try {
      const sessionId = getSessionId(req);
      const { order: orderData, items: orderItemsData } = req.body;
      const validatedOrder = insertOrderSchema.parse({
        ...orderData,
        sessionId
      });
      const validatedItems = orderItemsData.map(
        (item) => insertOrderItemSchema.parse(item)
      );
      const order = await storage.createOrder(validatedOrder, validatedItems);
      await storage.clearCart(sessionId);
      res.status(201).json(order);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid order data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create order" });
    }
  });
  app2.get("/api/orders/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const order = await storage.getOrder(id);
      if (!order) {
        return res.status(404).json({ message: "Order not found" });
      }
      res.json(order);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch order" });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();